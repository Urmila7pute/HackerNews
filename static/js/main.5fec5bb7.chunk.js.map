{"version":3,"sources":["Services/HackerNewsAPI.js","Components/NewsItems.js","Components/LineChart.js","Components/HackerNews.js","App.js","serviceWorker.js","index.js"],"names":["AllStoriesUrl","AllStories","page","a","axios","get","data","NewsItems","props","state","newsId","this","setState","row","hideNews","an","cursor","textDecoration","color","style","href","url","title","split","author","moment","created_at","fromNow","onClick","Component","LineChart","chartData","drawChart","prevProps","JSON","stringify","ctx","document","getElementById","Chart","type","labels","datasets","value","borderColor","lineTension","radius","pointBackgroundColor","fill","options","legend","display","scales","yAxes","scaleLabel","labelString","fontColor","fontSize","fontStyle","xAxes","classes","makeStyles","canvas","width","height","id","className","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","white","padding","body","sizeSmall","size","TableCell","StyledTableRow","root","action","hover","TableRow","hackerNews","fetchData","response","AllNews","hits","console","log","isHide","localStorage","setItem","objectID","UpVoteNews","index","points","getItem","parse","ChangePage","table","minWidth","tableRow","map","items","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","key","num_comments","scope","Button","length","App","HackerNews","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fec5bb7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const baseurl=\"https://hn.algolia.com/api/v1/\";\r\nexport const AllStoriesUrl=`${baseurl}search?query=foo&tags=story`;\r\n\r\nexport const AllStories= async (page)=>{\r\n    const data =await axios.get(`${AllStoriesUrl}&page=${page}`);\r\n    return data;\r\n}","import React, { Component } from 'react';\r\nimport {  makeStyles } from '@material-ui/core/styles';\r\n\r\nimport moment from 'moment'\r\n\r\nclass NewsItems extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newsId: null\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { newsId } = this.props;\r\n        this.setState({ newsId, });\r\n    }\r\n\r\n    render() {\r\n        const { row, hideNews } = this.props;\r\n        const an={\r\n            cursor: \"pointer\", \r\n             textDecoration:\"none\",\r\n             color: 'inherit'\r\n        }\r\n        return (\r\n            <div>\r\n                <a style={an} href={row.url}><b>{row.title}</b></a>\r\n                {row.url &&\r\n                    <span>\r\n                        (<a style={an} href={row.url} >{row.url.split(\"/\")[2]}</a>)\r\n                            </span>\r\n                }\r\n                by <b>{row.author}</b>\r\n                <span>\r\n                    {moment(row.created_at, \"YYYYMMDD\").fromNow()}\r\n                    <span onClick={() => hideNews(row)} style={{cursor: \"pointer\"}}> [hide] </span>\r\n                </span>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewsItems;\r\n","import React, { Component } from 'react';\r\nimport {  makeStyles } from '@material-ui/core/styles';\r\nimport Chart from 'chart.js';\r\n\r\nclass LineChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newsId: null,\r\n            chartData: {}\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { chartData } = this.props;\r\n        this.drawChart(chartData);\r\n    }\r\n\r\n     componentDidUpdate  (prevProps)  {\r\n        if (JSON.stringify(this.props) !== JSON.stringify(prevProps)) {\r\n        this.drawChart(this.props);\r\n        }\r\n    }\r\n\r\n    drawChart() {\r\n        const { chartData } = this.props;\r\n        var ctx = document.getElementById('myChart');\r\n        var myChart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: chartData.labels,\r\n                datasets: [{\r\n                    data: chartData.value,\r\n                    borderColor: [\r\n                        'rgba(44, 130, 201, 1)'\r\n                    ],\r\n                    lineTension: 0, // for Line\r\n                    radius: 4,// point radius\r\n                    pointBackgroundColor: 'rgba(44, 130, 201, 1)',//point color\r\n                    fill: false // in should not fill the color/data\r\n                }]\r\n            },\r\n            options: {\r\n                legend: {\r\n                    display: false\r\n                },\r\n                scales: {\r\n                    yAxes: [{\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Votes',\r\n                            fontColor: 'black',\r\n                            fontSize: 16,\r\n                            fontStyle: \"bold\",\r\n                        }\r\n                    }],\r\n                    xAxes: [{\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'ID',\r\n                            fontColor: 'black',\r\n                            fontSize: 16,\r\n                            fontStyle: \"bold\"\r\n\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { chartData } = this.props;\r\n        const classes = makeStyles({\r\n            canvas: {\r\n                width: 900,\r\n                height: 100,\r\n            }\r\n\r\n        });\r\n        return (\r\n            <div >\r\n                <canvas id=\"myChart\" className={classes.canvas} ></canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineChart;\r\n","import React, { Component } from 'react';\r\nimport { AllStories } from '../Services/HackerNewsAPI';\r\nimport NewsItems from './NewsItems';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\nimport moment from 'moment'\r\nimport Button from '@material-ui/core/Button';\r\nimport Chart from 'chart.js';\r\nimport LineChart from './LineChart';\r\n\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: \"#d35400\",\r\n        color: theme.palette.common.white,\r\n        padding:2,\r\n        fontSize:12,\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        padding: 4\r\n    },\r\n    sizeSmall: {\r\n        size: \"small\"\r\n    }\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    }\r\n}))(TableRow);\r\n\r\nclass hackerNews extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            AllNews: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { page } = this.state;\r\n        this.fetchData(page);\r\n    }\r\n\r\n    fetchData = async (page) => {\r\n        try {\r\n            const response = await AllStories(page);\r\n            const AllNews = response.data.hits;\r\n            this.setState({ AllNews, page })\r\n        } catch (error) {\r\n            console.log(\"error\", error);\r\n        }\r\n    }\r\n\r\n    hideNews =  row => {\r\n        const { AllNews } = this.state;\r\n        row.isHide = 1;\r\n        localStorage.setItem(`${row.objectID}`, JSON.stringify(row))\r\n        this.setState({ AllNews })\r\n    }\r\n\r\n    UpVoteNews = (index, row) => {\r\n        const { AllNews } = this.state;\r\n        const points = localStorage.getItem(row.objectID) ?\r\n            JSON.parse(localStorage.getItem(row.objectID)).points :\r\n            row.points\r\n        row.points = points + 1;\r\n        localStorage.setItem(`${row.objectID}`, JSON.stringify(row));\r\n        this.setState({ AllNews })\r\n    }\r\n\r\n    ChangePage = (value) => {\r\n        let { page } = this.state;\r\n        if (value === \"next\") {\r\n            page++;\r\n        } else { page--; }\r\n        this.fetchData(page);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { AllNews, page } = this.state;\r\n        const classes = makeStyles({\r\n            table: {\r\n                minWidth: 700,\r\n            },\r\n            tableRow: {\r\n                padding: 4\r\n            },\r\n        });\r\n        let chartData = {};\r\n        chartData.labels = AllNews.map(items => items.objectID)\r\n        chartData.value = AllNews.map(items =>\r\n            localStorage.getItem(items.objectID) ?\r\n                JSON.parse(localStorage.getItem(items.objectID)).points :\r\n                items.points\r\n        );\r\n\r\n        return (\r\n            <>\r\n                <TableContainer component={Paper} >\r\n                    <Table className={classes.table}\r\n                        aria-label=\"customized table\">\r\n                        <TableHead >\r\n                            <TableRow >\r\n                                <StyledTableCell>Comments</StyledTableCell>\r\n                                <StyledTableCell >Vote Count</StyledTableCell>\r\n                                <StyledTableCell >Up Vote</StyledTableCell>\r\n                                <StyledTableCell >News Details</StyledTableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody >\r\n                            {AllNews.map((row, id) => (\r\n                                localStorage.getItem(row.objectID) &&\r\n                                    (JSON.parse(localStorage.getItem(row.objectID)).isHide)\r\n                                    ? <div />\r\n                                    // tm\r\n                                    : (<StyledTableRow key={row.objectID}   >\r\n                                        <StyledTableCell > {row.num_comments} </StyledTableCell>\r\n                                        <StyledTableCell component=\"th\" scope=\"row\">\r\n                                            {localStorage.getItem(row.objectID) ?\r\n                                                JSON.parse(localStorage.getItem(row.objectID)).points :\r\n                                                row.points\r\n                                            }\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell ><ArrowDropUpIcon style={{cursor: \"pointer\"}} onClick={() => this.UpVoteNews(id, row)} /></StyledTableCell>\r\n                                        <StyledTableCell >\r\n                                            <NewsItems row={row} hideNews={this.hideNews}></NewsItems>\r\n                                        </StyledTableCell>\r\n                                    </StyledTableRow>)\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer >\r\n                {page !== 0 && <Button size=\"small\" onClick={() => this.ChangePage(\"prev\")}>\r\n                    prev\r\n          </Button>}\r\n                <Button size=\"small\" onClick={() => this.ChangePage(\"next\")} >\r\n                    next\r\n          </Button>\r\n                {chartData.labels.length && <LineChart chartData={chartData} />}\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default hackerNews;\r\n","import React from 'react';\nimport './App.css';\nimport HackerNews from './Components/HackerNews';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hacker News</h1>\n      <HackerNews />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}